/*
// Documentation \\
***** Note: Do not Edit this file as the code ines are important for this documentation ****

This file 'estimator.js' exports a function which recieves a single parameter data as you will see in line 105 and is exported on line 169.
This function will return an object of the form :
   {
       data: {}, // the input data you got
       impact: {}, // your best case estimation
       severeImpact: {} // your severe case estimation
   }
from an input of the form :
   {
       region: {
           name: string,
           avgAge: number,
           avgDailyIncomeInUSD: number,
           avgDailyIncomePopulation: number
       },
       periodType: string,
       timeToElapse: number,
       reportedCases: number,
       population: number,
       totalHospitalBeds: number
   }

*** THE RETURN OBJECT **

The return object has a property 'data' which simply returns the inputted object with all of its propeties and values intact
The 'impact' method has the following properties:
   currentlyInfected: [A propety refrenced in the form 'Object.impact.currentlyInfected' where Object is the returned object from the covid19ImpactEstimator. It returns a Numeric value]
   infectionsByRequestedTime: [Referenced in the form 'Object.impact.infectionsByRequestedTime().(days(noOfDays) | weeks(noOfWeeks) | months(noOfMonths)). Where days(..),weeks(..),months(..) are three methods callable on the function and their parameters respectively is the numeric value representing the time either in days, weeks or months]
   severeCasesByRequestedTime: [Referenced in the form 'Object.impact.severeCasesByRequestedTime().(days(noOfDays) | weeks(noOfWeeks) | months(noOfMonths)). Where days(..),weeks(..),months(..) are three methods callable on the function and their parameters respectively is the numeric value representing the time either in days, weeks or months]
   hospitalBedsByRequestedTime: [Referenced in the form 'Object.impact.hospitalBedsByRequestedTime().(days(noOfDays) | weeks(noOfWeeks) | months(noOfMonths)). Where days(..),weeks(..),months(..) are three methods callable on the function and their parameters respectively is the numeric value representing the time either in days, weeks or months]
   casesForICUByRequestedTime: [Referenced in the form 'Object.impact.casesForICUByRequestedTime().(days(noOfDays) | weeks(noOfWeeks) | months(noOfMonths)). Where days(..),weeks(..),months(..) are three methods callable on the function and their parameters respectively is the numeric value representing the time either in days, weeks or months]
   casesForVentilatorsByRequestedTime: [Referenced in the form 'Object.impact.casesForVentilatorsByRequestedTime().(days(noOfDays) | weeks(noOfWeeks) | months(noOfMonths)). Where days(..),weeks(..),months(..) are three methods callable on the function and their parameters respectively is the numeric value representing the time either in days, weeks or months]
   dollarsInFlight: [Referenced in the form 'Object.impact.dollarsInFlight()().(days(noOfDays) | weeks(noOfWeeks) | months(noOfMonths)). Where days(..),weeks(..),months(..) are three methods callable on the function and their parameters respectively is the numeric value representing the time either in days, weeks or months]

The 'severeImpact' method has the following properties:
   currentlyInfected: [A propety refrenced in the form 'Object.severeImpact.currentlyInfected' where Object is the returned object from the covid19ImpactEstimator. It returns a Numeric value]
   infectionsByRequestedTime: [Referenced in the form 'Object.severeImpact.infectionsByRequestedTime().(days(noOfDays) | weeks(noOfWeeks) | months(noOfMonths)). Where days(..),weeks(..),months(..) are three methods callable on the function and their parameters respectively is the numeric value representing the time either in days, weeks or months]
   severeCasesByRequestedTime: [Referenced in the form 'Object.severeImpact.severeCasesByRequestedTime().(days(noOfDays) | weeks(noOfWeeks) | months(noOfMonths)). Where days(..),weeks(..),months(..) are three methods callable on the function and their parameters respectively is the numeric value representing the time either in days, weeks or months]
   hospitalBedsByRequestedTime: [Referenced in the form 'Object.severeImpact.hospitalBedsByRequestedTime().(days(noOfDays) | weeks(noOfWeeks) | months(noOfMonths)). Where days(..),weeks(..),months(..) are three methods callable on the function and their parameters respectively is the numeric value representing the time either in days, weeks or months]
   casesForICUByRequestedTime: [Referenced in the form 'Object.severeImpact.casesForICUByRequestedTime().(days(noOfDays) | weeks(noOfWeeks) | months(noOfMonths)). Where days(..),weeks(..),months(..) are three methods callable on the function and their parameters respectively is the numeric value representing the time either in days, weeks or months]
   casesForVentilatorsByRequestedTime: [Referenced in the form 'Object.severeImpact.casesForVentilatorsByRequestedTime().(days(noOfDays) | weeks(noOfWeeks) | months(noOfMonths)). Where days(..),weeks(..),months(..) are three methods callable on the function and their parameters respectively is the numeric value representing the time either in days, weeks or months]
   dollarsInFlight: [Referenced in the form 'Object.severeImpact.dollarsInFlight()().(days(noOfDays) | weeks(noOfWeeks) | months(noOfMonths)). Where days(..),weeks(..),months(..) are three methods callable on the function and their parameters respectively is the numeric value representing the time either in days, weeks or months]


//End Of Documentation\\
*/

function infByReqTime() {
   return {
       days: (noOfDays) => {
           let temp = 2 ** Math.floor(noOfDays / 3);
           return this.currentlyInfected * temp;
       },
       weeks: (noOfWeeks) => {
           let temp = 2 ** Math.floor((noOfWeeks * 7) / 3);
           return this.currentlyInfected * temp;
       },
       months: (noOfMonths) => {
           let temp = 2 ** Math.floor((noOfMonths * 30) / 3);
           return this.currentlyInfected * temp;
       }
   }
}

function sevCaseByReqTime() {
   return {
       days: (noOfDays) => {
           return (this.infectionsByRequestedTime().days(noOfDays) * 0.15)
       },
       weeks: (noOfWeeks) => {
           return (this.infectionsByRequestedTime().weeks(noOfWeeks) * 0.15)
       },
       months: (noOfMonths) => { return (this.infectionsByRequestedTime().months(noOfMonths) * 0.15) }
   }
}

function caseForICUByReqTime() {
   return {
       days: (noOfDays) => {
           return (this.infectionsByRequestedTime().days(noOfDays) * 0.05)
       },
       weeks: (noOfWeeks) => {
           return (this.infectionsByRequestedTime().weeks(noOfWeeks) * 0.05)
       },
       months: (noOfMonths) => { return (this.infectionsByRequestedTime().months(noOfMonths) * 0.05) }
   }
}

function caseForVentilatorsByReqTime() {
   return {
       days: (noOfDays) => {
           return (this.infectionsByRequestedTime().days(noOfDays) * 0.02)
       },
       weeks: (noOfWeeks) => {
           return (this.infectionsByRequestedTime().weeks(noOfWeeks) * 0.02)
       },
       months: (noOfMonths) => { return (this.infectionsByRequestedTime().months(noOfMonths) * 0.02) }
   }
}

const covid19ImpactEstimator = (data) => {
   return {
       data: { ...data },
       impact: {
           currentlyInfected: data.reportedCases * 10,
           infectionsByRequestedTime: infByReqTime,
           severeCasesByRequestedTime: sevCaseByReqTime,
           hospitalBedsByRequestedTime: function () {
               let availableBeds = Math.floor(data.totalHospitalBeds * 0.35);
               return () => {
                   return {
                       days: (noOfDays) => { return availableBeds - this.severeCasesByRequestedTime().days(noOfDays) },
                       weeks: (noOfWeeks) => { return availableBeds - this.severeCasesByRequestedTime().weeks(noOfWeeks) },
                       months: (noOfMonths) => { return availableBeds - this.severeCasesByRequestedTime().months(noOfMonths) }
                   }
               }
           },
           casesForICUByRequestedTime: caseForICUByReqTime,
           casesForVentilatorsByRequestedTime: caseForVentilatorsByReqTime,
           dollarsInFlight: function () {
               let avgDailyIncPop = data.region.avgDailyIncomePopulation;
               let avgDailyIncUSD = data.region.avgDailyIncomeInUSD;
               console.log(avgDailyIncPop + " " + avgDailyIncUSD);
               return () => {
                   return {
                       days: (noOfDays) => { return this.infectionsByRequestedTime().days(noOfDays) * avgDailyIncPop * avgDailyIncUSD },
                       weeks: (noOfWeeks) => { return this.infectionsByRequestedTime().weeks(noOfWeeks) * avgDailyIncPop * avgDailyIncUSD },
                       months: (noOfMonths) => { return this.infectionsByRequestedTime().months(noOfMonths) * avgDailyIncPop * avgDailyIncUSD }
                   }
               }
           }
       },
       severeImpact: {
           currentlyInfected: data.reportedCases * 50,
           infectionsByRequestedTime: infByReqTime,
           severeCasesByRequestedTime: sevCaseByReqTime,
           hospitalBedsByRequestedTime: function () {
               let availableBeds = Math.floor(data.totalHospitalBeds * 0.35);
               return () => {
                   return {
                       days: (noOfDays) => { return availableBeds - this.severeCasesByRequestedTime().days(noOfDays) },
                       weeks: (noOfWeeks) => { return availableBeds - this.severeCasesByRequestedTime().weeks(noOfWeeks) },
                       months: (noOfMonths) => { return availableBeds - this.severeCasesByRequestedTime().months(noOfMonths) }
                   }
               }
           },
           casesForICUByRequestedTime: caseForICUByReqTime,
           casesForVentilatorsByRequestedTime: caseForVentilatorsByReqTime,
           dollarsInFlight: function () {
               let avgDailyIncPop = data.region.avgDailyIncomePopulation;
               let avgDailyIncUSD = data.region.avgDailyIncomeInUSD;
               console.log(avgDailyIncPop + " " + avgDailyIncUSD);
               return () => {
                   return {
                       days: (noOfDays) => { return this.infectionsByRequestedTime().days(noOfDays) * avgDailyIncPop * avgDailyIncUSD },
                       weeks: (noOfWeeks) => { return this.infectionsByRequestedTime().weeks(noOfWeeks) * avgDailyIncPop * avgDailyIncUSD },
                       months: (noOfMonths) => { return this.infectionsByRequestedTime().months(noOfMonths) * avgDailyIncPop * avgDailyIncUSD }
                   }
               }
           }
       }
   }
};

export default covid19ImpactEstimator;
